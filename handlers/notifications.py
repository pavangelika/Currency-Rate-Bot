# notifications.py
import datetime
import os
import re  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
from aiogram import Bot
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from database.db import get_last_course_data, update_last_course_data, get_all_jobs, create_db_pool
from logger.logging_settings import logger
from service.CbRF import course_today

bot = Bot(token=os.getenv("BOT_TOKEN"))

from tenacity import retry, wait_exponential, stop_after_attempt
from asyncio import run as aiorun

def sync_send_greeting(user_id, selected_data, day):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ send_greeting."""
    aiorun(send_greeting(user_id, selected_data))

async def load_jobs_from_db(scheduler, db_pool):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        jobs = await get_all_jobs(db_pool)
        for job in jobs:
            try:
                scheduler.add_job(
                    send_greeting,
                    IntervalTrigger(hours=1),
                    args=[job['user_id'], job['selected_data'], job['day'], db_pool],
                    id=job['job_id']
                )
                logger.info(f"Job {job['job_id']} loaded from DB.")
            except Exception as e:
                logger.error(f"Failed to load job {job['job_id']}: {e}")
    except Exception as e:
        logger.error(f"Error loading jobs from DB: {e}")


@retry(wait=wait_exponential(multiplier=1, min=4, max=10), stop=stop_after_attempt(5))
async def send_message_with_retry(user_id, text):
    await bot.send_message(chat_id=user_id, text=text)

async def send_greeting(user_id, selected_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    db_pool = await create_db_pool()  # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏
    try:
        day = datetime.date.today().strftime("%d/%m/%Y")  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        course_data = course_today(selected_data, day)
        single_line = " ".join(course_data.splitlines())

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currency_pattern = re.compile(
            re.escape(selected_data) + r"\s*=\s*(\d+[,.]\d+)",
            re.IGNORECASE
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        current_match = currency_pattern.search(course_data)
        if current_match:
            current_course_str = current_match.group(1).replace(',', '.')
            current_course = float(current_course_str)
        else:
            logger.error(f"–ö—É—Ä—Å –¥–ª—è '{selected_data}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É—Ä—Å
            last_match = currency_pattern.search(last_course_data) if last_course_data else None
            if last_match:
                # last_course_str = last_match.group(1).replace(',', '.')
                last_course = float(last_course_str)
                logger.info(f"last_course = {last_course}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—á–∏—Ç–∞–µ–º –∫—É—Ä—Å –Ω–æ–≤—ã–º
                last_course = None

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫—É—Ä—Å—ã
                if last_course is None or current_course != last_course:
                    await bot.send_message(user_id, course_data)
                    await update_last_course_data(db_pool, user_id, course_data)
                    logger.info(f"–ù–æ–≤—ã–π –∫—É—Ä—Å {selected_data} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.info(f"–ö—É—Ä—Å {selected_data} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if course_data != f"–î–∞–Ω–Ω—ã–µ –Ω–∞ {day} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã":
                last_course_data = await get_last_course_data(db_pool, user_id)
                logger.info(f"Last course data from DB: {last_course_data}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    finally:
        await db_pool.close()

def schedule_daily_greeting(user_id, scheduler, selected_data, day):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 7:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    job_id = f"job_daily_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(
                send_greeting,
                CronTrigger(hour=7, minute=0, timezone='Europe/Moscow'),
                args=[user_id, selected_data, day],  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                id=job_id
            )
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_greeting(user_id, scheduler, selected_data):  # –î–æ–±–∞–≤–∏–ª–∏ scheduler –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É '–ü—Ä–∏–≤–µ—Ç!' –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥."""
    job_id = f"job_interval_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(sync_send_greeting, IntervalTrigger(minutes=1), args=[user_id, selected_data, datetime.date.today().strftime("%d/%m/%Y")], id=job_id)
            logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_user(user_id, reminder_text, minutes, scheduler):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç."""
    job_id = f"Job_interval_user_{user_id}"

    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return

    try:
        scheduler.add_job(
            send_reminder_message,
            IntervalTrigger(minutes=minutes),
            args=[user_id, reminder_text],
            id=job_id
        )
        logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        logger.info(f"Newsletter'{reminder_text}' has been scheduled for {user_id} in {minutes} minutes.")
    except Exception as e:
        logger.error(f"Error. Task ID {job_id} has not been added: {e}")
    return job_id


async def send_reminder_message(user_id, reminder_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî {reminder_text}")
        logger.info(f"Success. Reminder has been sent {user_id}")
    except Exception as e:
        logger.error(f"Error. Reminder has not been sent: {e}")


def schedule_unsubscribe(job_id, scheduler):
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try:
        scheduler.remove_job(job_id)
    except Exception as e:
        logger.error(e)
