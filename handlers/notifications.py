# notifications.py
import datetime
import os
import re  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
from aiogram import Bot
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from database.db import get_last_course_data, update_last_course_data, get_all_jobs, create_db_pool
from logger.logging_settings import logger
from service.CbRF import course_today

bot = Bot(token=os.getenv("BOT_TOKEN"))

from tenacity import retry, wait_exponential, stop_after_attempt
from asyncio import run as aiorun

def sync_send_greeting(user_id, selected_data, day):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ send_greeting."""
    aiorun(send_greeting(user_id, selected_data))

async def load_jobs_from_db(scheduler, db_pool):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        jobs = await get_all_jobs(db_pool)
        for job in jobs:
            try:
                scheduler.add_job(
                    send_greeting,
                    IntervalTrigger(hours=1),
                    args=[job['user_id'], job['selected_data'], job['day'], db_pool],
                    id=job['job_id']
                )
                logger.info(f"Job {job['job_id']} loaded from DB.")
            except Exception as e:
                logger.error(f"Failed to load job {job['job_id']}: {e}")
    except Exception as e:
        logger.error(f"Error loading jobs from DB: {e}")


@retry(wait=wait_exponential(multiplier=1, min=4, max=10), stop=stop_after_attempt(5))
async def send_message_with_retry(user_id, text):
    await bot.send_message(chat_id=user_id, text=text)


async def send_greeting(user_id, selected_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç."""
    db_pool = await create_db_pool()
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≤—ã–±—Ä–∞–Ω–æ –≤–∞–ª—é—Ç: {len(selected_data)}")

        day = datetime.date.today().strftime("%d/%m/%Y")
        logger.debug(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {day}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
        course_data = course_today(selected_data, day)
        logger.debug(f"RAW –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤:\n{course_data}")

        if course_data == f"–î–∞–Ω–Ω—ã–µ –Ω–∞ {day} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã":
            logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        last_course_data = await get_last_course_data(db_pool, user_id)
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:\n{last_course_data or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

        has_changes = False
        currency_changes = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤–∞–ª—é—Ç—É
        for currency in selected_data:
            currency_name = currency['name']
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã: {currency_name}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞
            pattern = re.compile(
                fr"{re.escape(currency_name)}\s*=\s*(\d+[,.]\d+)",
                re.IGNORECASE
            )

            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            current_match = pattern.search(course_data)
            if not current_match:
                logger.error(f"–ö—É—Ä—Å {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                continue

            current = float(current_match.group(1).replace(',', '.'))

            # –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
            last = None
            if last_course_data:
                last_match = pattern.search(last_course_data)
                if last_match:
                    last = float(last_match.group(1).replace(',', '.'))

            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            logger.debug(f"{currency_name}: —Ç–µ–∫—É—â–∏–π {current} | –ø—Ä–µ–¥—ã–¥—É—â–∏–π {last}")

            if last is None or current != last:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ {currency_name}")
                has_changes = True
                currency_changes.append(f"{currency_name}: {last or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} ‚Üí {current}")

        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if has_changes:
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ {len(currency_changes)} –≤–∞–ª—é—Ç–∞—Ö")
            await bot.send_message(user_id, course_data)
            await update_last_course_data(db_pool, user_id, course_data)
            logger.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_log = "\n".join(currency_changes)
            logger.debug(f"–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n{changes_log}")
        else:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
        logger.error(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: user={user_id}, data={selected_data}")

    finally:
        await db_pool.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

def schedule_daily_greeting(user_id, scheduler, selected_data, day):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 7:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    job_id = f"job_daily_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(
                send_greeting,
                CronTrigger(hour=7, minute=0, timezone='Europe/Moscow'),
                args=[user_id, selected_data, day],  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                id=job_id
            )
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_greeting(user_id, scheduler, selected_data):  # –î–æ–±–∞–≤–∏–ª–∏ scheduler –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É '–ü—Ä–∏–≤–µ—Ç!' –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥."""
    job_id = f"job_interval_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(sync_send_greeting, IntervalTrigger(minutes=1), args=[user_id, selected_data, datetime.date.today().strftime("%d/%m/%Y")], id=job_id)
            logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_user(user_id, reminder_text, minutes, scheduler):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç."""
    job_id = f"Job_interval_user_{user_id}"

    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return

    try:
        scheduler.add_job(
            send_reminder_message,
            IntervalTrigger(minutes=minutes),
            args=[user_id, reminder_text],
            id=job_id
        )
        logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        logger.info(f"Newsletter'{reminder_text}' has been scheduled for {user_id} in {minutes} minutes.")
    except Exception as e:
        logger.error(f"Error. Task ID {job_id} has not been added: {e}")
    return job_id


async def send_reminder_message(user_id, reminder_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî {reminder_text}")
        logger.info(f"Success. Reminder has been sent {user_id}")
    except Exception as e:
        logger.error(f"Error. Reminder has not been sent: {e}")


def schedule_unsubscribe(job_id, scheduler):
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try:
        scheduler.remove_job(job_id)
    except Exception as e:
        logger.error(e)
