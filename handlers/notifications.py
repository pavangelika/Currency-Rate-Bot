# notifications.py
import os

from aiogram import Bot
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from database.db import get_last_course_data, update_last_course_data, create_db_pool
from logger.logging_settings import logger
from service.CbRF import course_today

bot = Bot(token=os.getenv("BOT_TOKEN"))


async def send_greeting(user_id, selected_data, day, db_pool):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å."""
    try:
        course_data = course_today(selected_data, day)
        single_line = " ".join(course_data.splitlines())
        logger.info(f"Course data for {day}: {single_line}")

        if course_data != f"–î–∞–Ω–Ω—ã–µ –Ω–∞ {day} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã":
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            last_course_data = await get_last_course_data(db_pool, user_id)

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º last_course_data
            if course_data != last_course_data:
                await bot.send_message(user_id, course_data)
                await update_last_course_data(db_pool, user_id, course_data)
                logger.info(f"New course data sent to user {user_id}.")
            else:
                logger.info(f"Course data for user {user_id} has not changed. Skipping send.")
    except Exception as e:
        logger.error(f"Error. The daily newsletter has been not sent: {e}")


def schedule_daily_greeting(user_id, scheduler, selected_data, day):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 7:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    job_id = f"job_daily_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(
                send_greeting,
                CronTrigger(hour=7, minute=0, timezone='Europe/Moscow'),
                args=[user_id, selected_data, day],  # –ü–µ—Ä–µ–¥–∞–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                id=job_id
            )
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_greeting(user_id, scheduler, selected_data, day, db_pool):  # –î–æ–±–∞–≤–∏–ª–∏ scheduler –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É '–ü—Ä–∏–≤–µ—Ç!' –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥."""
    job_id = f"job_interval_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(send_greeting, IntervalTrigger(seconds=30), args=[user_id, selected_data, day, db_pool], id=job_id)
            logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        except Exception as e:
            logger.error(e)
    return job_id


def schedule_interval_user(user_id, reminder_text, minutes, scheduler):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç."""
    job_id = f"Job_interval_user_{user_id}"

    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return

    try:
        scheduler.add_job(
            send_reminder_message,
            IntervalTrigger(minutes=minutes),
            args=[user_id, reminder_text],
            id=job_id
        )
        logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        logger.info(f"Newsletter'{reminder_text}' has been scheduled for {user_id} in {minutes} minutes.")
    except Exception as e:
        logger.error(f"Error. Task ID {job_id} has not been added: {e}")
    return job_id


async def send_reminder_message(user_id, reminder_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî {reminder_text}")
        logger.info(f"Success. Reminder has been sent {user_id}")
    except Exception as e:
        logger.error(f"Error. Reminder has not been sent: {e}")


def schedule_unsubscribe(job_id, scheduler):
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try:
        scheduler.remove_job(job_id)
    except Exception as e:
        logger.error(e)
